#!/usr/bin/env python2
"""
PROBLEM 12
----------
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred
divisors?

Copyright (c) Project Euler
See: http://projecteuler.net/copyright

SOLUTION
--------
76576500

Copyright (c) 2012, T. Zengerink
See: https://raw.github.com/Mytho/project-euler-python/master/LISENCE
"""

from profiler import Profiler
from math import floor


def divisors(n):
    """Get a list of all divisors of N."""
    d, r = [], int(floor(n**.5))
    for i in range(1, r):
        if not n % i:
            d.extend([i, n / i])
    if not n**.5 % 1:
        d.append(n)
    return d


def find_triangle(n):
    """Find the first triangle number with N divisors."""
    t, i = 1, 1
    while True:
        i += 1
        t += i
        if len(divisors(t)) > n:
            return t


if __name__ == "__main__":
    print(find_triangle(500))
    Profiler.report()
